package database;

import java.io.IOException;
import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import sun.misc.BASE64Encoder;

@WebServlet("/accountServlet")
public class Account extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doPost(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		
		boolean registering = request.getParameter("registerEmail") != null;
		if (registering)
		{
			String email = request.getParameter("registerEmail");
			String password = request.getParameter("password");
			String registerErr = register(email, password);
			if (registerErr.length() > 0)
			{
				session.setAttribute("message", "<a style='color: red'>Failed to create an account: " + registerErr + "</a>");
			}
		}
	}
	
	protected String register(String email, String password)
	{
		if (password.length() == 0)
			return "A password is required.";
		try {
			password = encrypt(password);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return Database.executeUpdate("INSERT INTO Accounts (Email, Pass) VALUES ('" + email + "', '" + password + "')");
	}
	
	private static final String ALGORITHM = "AES";
	private static final byte[] keyValue = 
	    new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };

	 public static String encrypt(String valueToEnc) throws Exception {
	    Key key = generateKey();
	    Cipher c = Cipher.getInstance(ALGORITHM);
	    c.init(Cipher.ENCRYPT_MODE, key);
	    byte[] encValue = c.doFinal(valueToEnc.getBytes());
	    String encryptedValue = new BASE64Encoder().encode(encValue);
	    return encryptedValue;
	}

	private static Key generateKey() throws Exception {
	    Key key = new SecretKeySpec(keyValue, ALGORITHM);
	    return key;
	}
}
