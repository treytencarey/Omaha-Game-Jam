package database;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.CharBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import project.Main;
import utils.Utils;

@WebServlet("/databaseServlet")
public class Database extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	public static final String AUTH_DB = Main.context.getRealPath("/Databases/accounts.db");
	
	public static Map<String, String> getQueryMap(String query)  
	{  
	    String[] params = query.split("&");  
	    Map<String, String> map = new HashMap<String, String>();  
	    for (String param : params)  
	    {  
	        String name = param.split("=")[0];  
	        String value = param.split("=")[1];  
	        map.put(name, value);  
	    }  
	    return map;  
	}
	
	protected void doPost(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		
		// This is where forms will be submitted by using databaseServlet
	}
	
	public static boolean executeUpdate(String sql) throws ClassNotFoundException {
		return Database.executeUpdate(sql, Database.AUTH_DB);
	}
	public static boolean executeUpdate(String sql, String dbName) throws ClassNotFoundException
	{
		// load the sqlite-JDBC driver using the current class loader
	    Class.forName("org.sqlite.JDBC");
	
	    Connection connection = null;
	    try
	    {
			// create a database connection
			connection = DriverManager.getConnection("jdbc:sqlite:" + dbName);
			
			Statement statement = connection.createStatement();
			statement.setQueryTimeout(30);  // set timeout to 30 sec.
			
			statement.executeUpdate(sql);
			return true;
		}
	    catch (SQLException e)
	    {
	    	System.err.println(e.getMessage());
	    }       
	    finally
	    {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e)
			{  // Use SQLException class instead.          
				System.err.println(e); 
			}
	    }
	    return false;
	}
	
	public static List<Map<String, Object>> executeQuery(String sql) throws ClassNotFoundException
	{
		return Database.executeQuery(sql, Database.AUTH_DB);
	}
	public static List<Map<String, Object>> executeQuery(String sql, String dbName) throws ClassNotFoundException
	{
		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();
		
		// load the sqlite-JDBC driver using the current class loader
	    Class.forName("org.sqlite.JDBC");
	
	    Connection connection = null;
	    try
	    {
			// create a database connection
			connection = DriverManager.getConnection("jdbc:sqlite:" + dbName);
			
			Statement statement = connection.createStatement();
			statement.setQueryTimeout(30);  // set timeout to 30 sec.
			
			ResultSet resultset = statement.executeQuery(sql);
			
		    Map<String, Object> row = null;

		    ResultSetMetaData metaData = resultset.getMetaData();
		    Integer columnCount = metaData.getColumnCount();

		    while (resultset.next()) {
		        row = new LinkedHashMap<String, Object>();
		        for (int i = 1; i <= columnCount; i++) {
		            row.put(metaData.getColumnName(i), resultset.getObject(i));
		        }
		        resultList.add(row);
		    }
		}
	    catch (SQLException e)
	    {
	    	System.err.println(e.getMessage());
	    }       
	    finally
	    {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e)
			{  // Use SQLException class instead.          
				System.err.println(e); 
			}
	    }
	    return resultList;
	}
	
	private static List<List<String>> sqlTable;
	public static void setSQLTable(String sql, HttpSession session)
	{
		String table = sql.substring(sql.lastIndexOf("FROM ")+5);
		table = table.substring(0,(table.indexOf(" ") == -1) ? table.length() : table.indexOf(" "));
		session.setAttribute("sqldataTable", table);
		
		setSQLTable(sql);
	}
	public static void setSQLTable(String sql, HttpSession session, String table)
	{
		session.setAttribute("sqldataTable", table);
		
		setSQLTable(sql);
	}
	public static void setSQLTable(String sql)
	{
		List<List<String>> result = new ArrayList<List<String>>();
		
		List<Map<String, Object>> data = null;
		try {
			data = Database.executeQuery(sql);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			sqlTable = result;
			return;
		}
		
		if (data.size() == 0)
		{
			sqlTable = result;
			return;
		}
		
		List<String> cols = new ArrayList<String>(data.get(0).keySet());
		for (int i = cols.size()-1; i >= 0; i--)
			if (cols.get(i).startsWith("-"))
				cols.remove(i);
		result.add(cols);
		
		for (int i = 0; i < data.size(); i++)
		{
			List<String> row = new ArrayList<String>();
			
			for (int n = 0; n < cols.size(); n++)
			{
				try {
					row.add(data.get(i).get(cols.get(n)).toString());
				} catch (Exception e) { row.add(""); }
			}
			
			result.add(row);
		}
		
		sqlTable = result;
	}
	public static List<List<String>> getSQLTable()
	{
		return sqlTable;
	}
}
